{"version":3,"sources":["api-key.js","App.js","index.js"],"names":["apiKey","ItemList","props","useState","inputVal","setInputVal","className","children","onChange","e","target","value","type","placeholder","keyName","itemList","filter","item","String","toLowerCase","startsWith","map","onClick","selectItem","Results","airQuality","setAirQuality","airQualityDescriptions","Green","description","color","Yellow","Orange","Red","Purple","Maroon","none","useEffect","setResultsBackground","determineAirQuality","results","data","current","pollution","aqius","number","weatherUpdateTime","Date","weather","ts","pollutionUpdateTime","ic","src","alt","city","state","country","colorToConcern","getHours","getMinutes","getMonth","getDate","getFullYear","tp","handleErrors","response","ok","Error","statusText","App","countryList","setCountryList","chosenCountry","setChosenCountry","stateList","setStateList","chosenState","setChosenState","cityList","setCityList","chosenCity","setChosenCity","USER_CITY","setResults","errors","setErrors","currentScreen","setCurrentScreen","resultsBackground","handleReset","fetch","then","res","json","catch","console","log","style","background","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48f43445.chunk.js","sourcesContent":["const apiKey = \"f523e477-7200-471e-bc77-f4e7f17f707a\";\r\nexport default apiKey;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport apiKey from \"./api-key\";\r\nimport \"./styles.css\";\r\n\r\n// docs: https://api-docs.iqair.com/\r\n// dashboard: https://www.iqair.com/dashboard/api\r\n\r\n// IDEAS:\r\n// REFACTOR: make all the selection screens into a single component;\r\n// pass the header info as a props.children, pass the setter function, and pass the data\r\n\r\n// add button to use IP address for quick info\r\n// add < and restart buttons for navigating backward\r\n// add \"bread crumbs\" to show what we have done and what we have left\r\n// TEST comment\r\n\r\n// a change\r\n\r\nfunction App() {\r\n\t// the list of countries we will fetch\r\n\tconst [countryList, setCountryList] = useState([]);\r\n\t// the country chosen by user\r\n\tconst [chosenCountry, setChosenCountry] = useState(\"\");\r\n\r\n\t// the list of states fetched once we know the country\r\n\tconst [stateList, setStateList] = useState([]);\r\n\t// the state chosen by the user\r\n\tconst [chosenState, setChosenState] = useState(\"\");\r\n\r\n\t// the list of cities within the state chosen by user\r\n\tconst [cityList, setCityList] = useState([]);\r\n\t// the city chosen by the user\r\n\tconst [chosenCity, setChosenCity] = useState(\"\");\r\n\tconst USER_CITY = \"OWN_USER_CITY\";\r\n\r\n\t// the object containing all the weather/pollution data once city is chosen\r\n\tconst [results, setResults] = useState({});\r\n\tconst [errors, setErrors] = useState(\"\");\r\n\t// keep track of current step: country, state, city, or use IP address\r\n\tconst [currentScreen, setCurrentScreen] = useState(\"country\");\r\n\r\n\tconst [resultsBackground, setResultsBackground] = useState(\"\");\r\n\r\n\tconst handleIPRequest = () => {\r\n\t\tsetChosenCity(USER_CITY);\r\n\t\tsetCurrentScreen(\"results\");\r\n\t};\r\n\r\n\t// function to handle selecting a country from a button\r\n\tconst selectCountry = (country) => {\r\n\t\tsetChosenCountry(() => String(country));\r\n\t\tsetCurrentScreen(\"state\");\r\n\t};\r\n\r\n\t// function to handle selecting a state from a button\r\n\tconst selectState = (state) => {\r\n\t\tsetChosenState(() => String(state));\r\n\t\tsetCurrentScreen(\"city\");\r\n\t};\r\n\r\n\t// function to handle selecting a city w/ button\r\n\tconst selectCity = (city) => {\r\n\t\tsetChosenCity(() => String(city));\r\n\t\tsetCurrentScreen(\"results\");\r\n\t};\r\n\r\n\t// reset state and screens from whichever screen we were on\r\n\tconst handleReset = () => {\r\n\t\tsetChosenCountry(\"\");\r\n\t\tsetChosenState(\"\");\r\n\t\tsetChosenCity(\"\");\r\n\t\tsetCurrentScreen(\"country\");\r\n\t\tsetResultsBackground(\"\");\r\n\t};\r\n\r\n\t// fetches the list of countries on load\r\n\tuseEffect(() => {\r\n\t\tfetch(\"http://api.airvisual.com/v2/countries?key=\" + apiKey)\r\n\t\t\t.then(handleErrors)\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((json) => setCountryList(json.data))\r\n\t\t\t.catch(() => {\r\n\t\t\t\thandleReset();\r\n\t\t\t\tsetErrors(\"Uh oh, errors occurred while getting that country's data.\");\r\n\t\t\t}); // sets our country list to the json data\r\n\r\n\t\tfetch(\"http://api.airvisual.com/v2/nearest_city?key=\" + apiKey)\r\n\t\t\t.then(handleErrors)\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((json) => setResults(json))\r\n\t\t\t.catch(() => {\r\n\t\t\t\thandleReset();\r\n\t\t\t\tsetErrors(\"Uh oh, errors occurred while getting your city's data.\");\r\n\t\t\t});\r\n\t\treturn () => setErrors(\"\");\r\n\t}, []);\r\n\r\n\t// fetches the list of states once we have a country\r\n\tuseEffect(() => {\r\n\t\tif (chosenCountry !== \"\") {\r\n\t\t\tconsole.log(\"chosen country: \" + chosenCountry);\r\n\t\t\tfetch(\r\n\t\t\t\t\"http://api.airvisual.com/v2/states?country=\" +\r\n\t\t\t\t\tchosenCountry +\r\n\t\t\t\t\t\"&key=\" +\r\n\t\t\t\t\tapiKey\r\n\t\t\t)\r\n\t\t\t\t.then(handleErrors)\r\n\t\t\t\t.then((res) => res.json())\r\n\t\t\t\t.then((json) => setStateList(json.data))\r\n\t\t\t\t.catch(() => {\r\n\t\t\t\t\thandleReset();\r\n\t\t\t\t\tsetErrors(\r\n\t\t\t\t\t\t\"Uh oh, errors occurred while getting that country's data.\"\r\n\t\t\t\t\t);\r\n\t\t\t\t}); // sets our state list with fetched data\r\n\t\t}\r\n\t\treturn () => setErrors(\"\");\r\n\t}, [chosenCountry]);\r\n\r\n\t// fetches the list of cities within the specified state/country\r\n\tuseEffect(() => {\r\n\t\tif (chosenCountry !== \"\" && chosenState !== \"\") {\r\n\t\t\tfetch(\r\n\t\t\t\t\"http://api.airvisual.com/v2/cities?state=\" +\r\n\t\t\t\t\tchosenState +\r\n\t\t\t\t\t\"&country=\" +\r\n\t\t\t\t\tchosenCountry +\r\n\t\t\t\t\t\"&key=\" +\r\n\t\t\t\t\tapiKey\r\n\t\t\t)\r\n\t\t\t\t.then(handleErrors) // helper function throws error if not good request\r\n\t\t\t\t.then((res) => res.json())\r\n\t\t\t\t.then((json) => setCityList(json.data))\r\n\t\t\t\t.catch(() => {\r\n\t\t\t\t\thandleReset();\r\n\t\t\t\t\tsetErrors(\"Uh oh, errors occurred while getting that state's data.\");\r\n\t\t\t\t}); // sets our city list to the fetched data\r\n\t\t}\r\n\t\treturn () => setErrors(\"\");\r\n\t}, [chosenState, chosenCountry]);\r\n\r\n\t// fetch the data about the chosen city/state/country\r\n\tuseEffect(() => {\r\n\t\tif (chosenCity === USER_CITY) {\r\n\t\t\tfetch(\"http://api.airvisual.com/v2/nearest_city?key=\" + apiKey)\r\n\t\t\t\t.then(handleErrors)\r\n\t\t\t\t.then((res) => res.json())\r\n\t\t\t\t.then((json) => setResults(json))\r\n\t\t\t\t.catch(() => {\r\n\t\t\t\t\thandleReset();\r\n\t\t\t\t\tsetErrors(\"Uh oh, errors occurred while getting your city's data.\");\r\n\t\t\t\t});\r\n\t\t}\r\n\t\tif (chosenCountry !== \"\" && chosenState !== \"\" && chosenCity !== \"\") {\r\n\t\t\tfetch(\r\n\t\t\t\t\"http://api.airvisual.com/v2/city?city=\" +\r\n\t\t\t\t\tchosenCity +\r\n\t\t\t\t\t\"&state=\" +\r\n\t\t\t\t\tchosenState +\r\n\t\t\t\t\t\"&country=\" +\r\n\t\t\t\t\tchosenCountry +\r\n\t\t\t\t\t\"&key=\" +\r\n\t\t\t\t\tapiKey\r\n\t\t\t)\r\n\t\t\t\t.then((res) => res.json())\r\n\t\t\t\t.then((json) => setResults(json))\r\n\t\t\t\t.catch(() => {\r\n\t\t\t\t\thandleReset();\r\n\t\t\t\t\tsetErrors(\"Uh oh, errors occurred while getting that city's data.\");\r\n\t\t\t\t}); // set our results to the fetched data\r\n\t\t}\r\n\r\n\t\treturn () => setErrors(\"\");\r\n\t}, [chosenCity, chosenCountry, chosenState]);\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={`App ${currentScreen === \"results\" ? \"results-app\" : \"\"}`}\r\n\t\t\tstyle={{\r\n\t\t\t\tbackground: resultsBackground\r\n\t\t\t\t\t? `radial-gradient(#fff, ${resultsBackground} 99%)`\r\n\t\t\t\t\t: \"\",\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<header>\r\n\t\t\t\t<h1>Air Quality App</h1>\r\n\t\t\t\t<h2>Find out about the air you breathe</h2>\r\n\t\t\t</header>\r\n\t\t\t<div className=\"top-btn-container\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button className=\"btn top-btn\" onClick={handleReset}>\r\n\t\t\t\t\t\tReset\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t{currentScreen === \"country\" ? (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button className=\"btn top-btn\" onClick={handleIPRequest}>\r\n\t\t\t\t\t\t\tJust Show My Air Quality!\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\r\n\t\t\t{currentScreen === \"country\" ? ( // if our currentScreen state is \"country\", display country component\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ItemList\r\n\t\t\t\t\t\titemList={countryList}\r\n\t\t\t\t\t\tselectItem={selectCountry}\r\n\t\t\t\t\t\tkeyName=\"country\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<h2>Find a Country</h2>\r\n\t\t\t\t\t\t<h3>{errors ? errors : null}</h3>\r\n\t\t\t\t\t</ItemList>{\" \"}\r\n\t\t\t\t\t{/* pass in all of our countries and the function for choosing a country*/}\r\n\t\t\t\t</div>\r\n\t\t\t) : null}\r\n\r\n\t\t\t{currentScreen === \"state\" ? (\r\n\t\t\t\t<ItemList itemList={stateList} selectItem={selectState} keyName=\"state\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"back-btn\"\r\n\t\t\t\t\t\tonClick={() => setCurrentScreen(\"country\")}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t⬅️\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<h3>Current country: {chosenCountry}</h3>\r\n\t\t\t\t\t<h2>Find a State</h2>\r\n\t\t\t\t</ItemList>\r\n\t\t\t) : null}\r\n\r\n\t\t\t{currentScreen === \"city\" ? (\r\n\t\t\t\t<ItemList itemList={cityList} selectItem={selectCity} keyName=\"city\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"back-btn\"\r\n\t\t\t\t\t\tonClick={() => setCurrentScreen(\"state\")}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t⬅️\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<h3>Current country: {chosenCountry}</h3>\r\n\t\t\t\t\t<h3>Current state: {chosenState}</h3>\r\n\t\t\t\t\t<h2>Find a City:</h2>\r\n\t\t\t\t</ItemList>\r\n\t\t\t) : null}\r\n\t\t\t{currentScreen === \"results\" ? (\r\n\t\t\t\t<Results\r\n\t\t\t\t\tresults={results}\r\n\t\t\t\t\tsetResultsBackground={setResultsBackground}\r\n\t\t\t\t/>\r\n\t\t\t) : null}\r\n\t\t\t{/* if our current Screen is \"results\", display the results data */}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n// Component for listing all available buttons and allowing users to\r\n// search for a certain item\r\n// props: props.selectItem, props.children, props.keyName, props.itemList\r\nconst ItemList = (props) => {\r\n\t// this stores value of user typing in input box\r\n\tconst [inputVal, setInputVal] = useState(\"\");\r\n\t// this handles user input: sets state\r\n\tconst handleInput = (e) => {\r\n\t\tsetInputVal(e.target.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<section className=\"btn-search-area\">\r\n\t\t\t{props.children}\r\n\t\t\t<input\r\n\t\t\t\tonChange={handleInput}\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder={\"Search for a \" + props.keyName}\r\n\t\t\t\tclassName=\"searchBar\"\r\n\t\t\t/>\r\n\t\t\t<div className=\"item-btns\">\r\n\t\t\t\t{props.itemList\r\n\t\t\t\t\t.filter((item) => {\r\n\t\t\t\t\t\t// filter countries: they must start how our user input starts\r\n\t\t\t\t\t\treturn String(item[props.keyName])\r\n\t\t\t\t\t\t\t.toLowerCase() // change country to lower case, then check if this matches the string\r\n\t\t\t\t\t\t\t.startsWith(inputVal.toLowerCase());\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.map((item) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div key={String(item[props.keyName])} className=\"btn-container\">\r\n\t\t\t\t\t\t\t\t{/* map each country to a wrapper div and a button: on click, \r\n                           this uses the select country function with the \r\n                           selected country as argument (chooses that country) */}\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tonClick={() => props.selectItem(item[props.keyName])}\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{item[props.keyName]}\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}) || <p>couldn't find a matching {props.keyName}</p>}\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nconst Results = (props) => {\r\n\tconst [airQuality, setAirQuality] = useState(\"\");\r\n\tconst airQualityDescriptions = {\r\n\t\tGreen: {\r\n\t\t\tdescription:\r\n\t\t\t\t\"Air quality is satisfactory, and air pollution poses little or no risk.\",\r\n\t\t\tcolor: \"rgba(66, 245, 96, 0.5)\",\r\n\t\t},\r\n\t\tYellow: {\r\n\t\t\tdescription:\r\n\t\t\t\t\"Air quality is acceptable. However, there may be a risk for some people, particularly those who are unusually sensitive to air pollution.\",\r\n\t\t\tcolor: \"rgba(239, 245, 66, 0.5)\",\r\n\t\t},\r\n\t\tOrange: {\r\n\t\t\tdescription:\r\n\t\t\t\t\"Members of sensitive groups may experience health effects. The general public is less likely to be affected.\",\r\n\t\t\tcolor: \"rgba(245, 206, 66)\",\r\n\t\t},\r\n\t\tRed: {\r\n\t\t\tdescription:\r\n\t\t\t\t\"Some members of the general public may experience health effects; members of sensitive groups may experience more serious health effects.\",\r\n\t\t\tcolor: \"rgba(245, 87, 66)\",\r\n\t\t},\r\n\t\tPurple: {\r\n\t\t\tdescription:\r\n\t\t\t\t\"Health alert: The risk of health effects is increased for everyone.\",\r\n\t\t\tcolor: \"rgba(242, 34, 197)\",\r\n\t\t},\r\n\t\tMaroon: {\r\n\t\t\tdescription:\r\n\t\t\t\t\"Health warning of emergency conditions: everyone is more likely to be affected.\",\r\n\t\t\tcolor: \"rgba(163, 42, 5)\",\r\n\t\t},\r\n\t\tnone: {\r\n\t\t\tdescription: \"\",\r\n\t\t\tcolor: \"#fff\",\r\n\t\t},\r\n\t\t\"\": {\r\n\t\t\tdescription: \"\",\r\n\t\t\tcolor: \"#fff\",\r\n\t\t},\r\n\t};\r\n\t// only on reload: set the background\r\n\tuseEffect(() => {\r\n\t\tprops.setResultsBackground(airQualityDescriptions[airQuality].color);\r\n\t}, [airQuality, airQualityDescriptions]);\r\n\r\n\t// sets the air quality\r\n\tuseEffect(() => {\r\n\t\tsetAirQuality(\r\n\t\t\tdetermineAirQuality(props.results.data.current.pollution.aqius)\r\n\t\t);\r\n\t\t// console.log(airQuality);\r\n\t}, [airQuality, props.results.data]);\r\n\r\n\tconst determineAirQuality = (number) => {\r\n\t\treturn number < 51\r\n\t\t\t? \"Green\"\r\n\t\t\t: number < 101\r\n\t\t\t? \"Yellow\"\r\n\t\t\t: number < 151\r\n\t\t\t? \"Orange\"\r\n\t\t\t: number < 201\r\n\t\t\t? \"Red\"\r\n\t\t\t: number < 301\r\n\t\t\t? \"Purple\"\r\n\t\t\t: \"Maroon\";\r\n\t};\r\n\r\n\tconst colorToConcern = (color) => {\r\n\t\tswitch (color) {\r\n\t\t\tcase \"Green\":\r\n\t\t\t\treturn \"Good\";\r\n\t\t\tcase \"Yellow\":\r\n\t\t\t\treturn \"Moderate\";\r\n\t\t\tcase \"Orange\":\r\n\t\t\t\treturn \"Unhealthy for Sensitive Groups\";\r\n\t\t\tcase \"Red\":\r\n\t\t\t\treturn \"Unhealthy\";\r\n\t\t\tcase \"Purple\":\r\n\t\t\t\treturn \"Very Unhealthy\";\r\n\t\t\tcase \"Maroon\":\r\n\t\t\t\treturn \"Hazardous\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"none\";\r\n\t\t}\r\n\t};\r\n\r\n\tconst weatherUpdateTime = new Date(\r\n\t\t`${props.results.data.current.weather.ts}`\r\n\t);\r\n\tconst pollutionUpdateTime = new Date(\r\n\t\t`${props.results.data.current.pollution.ts}`\r\n\t);\r\n\r\n\treturn (\r\n\t\t<section className=\"results-section\">\r\n\t\t\t{props.results.data.current.weather.ic ? (\r\n\t\t\t\t<img\r\n\t\t\t\t\tsrc={`https://www.airvisual.com/images/${props.results.data.current.weather.ic}.png`}\r\n\t\t\t\t\talt=\"current weather\"\r\n\t\t\t\t\tclassName=\"weather-image\"\r\n\t\t\t\t/>\r\n\t\t\t) : null}\r\n\r\n\t\t\t<h1 className=\"results-h1\">\r\n\t\t\t\t{props.results.data.city}, {props.results.data.state},{\" \"}\r\n\t\t\t\t{props.results.data.country}\r\n\t\t\t</h1>\r\n\t\t\t<div className=\"air-quality results-container\">\r\n\t\t\t\t<h2>\r\n\t\t\t\t\tAir Quality: {colorToConcern(airQuality)} (U.S. AQI:{\" \"}\r\n\t\t\t\t\t{props.results.data.current.pollution.aqius})\r\n\t\t\t\t</h2>\r\n\t\t\t\t<h3 className=\"timestamp-info\">\r\n\t\t\t\t\t(as of{\" \"}\r\n\t\t\t\t\t{/* hours: \r\n                        if greater than 12, subtract 12.\r\n                        if equal to 0, show 12.  */}\r\n\t\t\t\t\t{pollutionUpdateTime.getHours() <= 12\r\n\t\t\t\t\t\t? pollutionUpdateTime.getHours()\r\n\t\t\t\t\t\t: pollutionUpdateTime.getHours() === 0\r\n\t\t\t\t\t\t? \"12\"\r\n\t\t\t\t\t\t: pollutionUpdateTime.getHours() - 12}\r\n\t\t\t\t\t{\":\"}\r\n\t\t\t\t\t{/* minutes: if less than 10, add a zero */}\r\n\t\t\t\t\t{pollutionUpdateTime.getMinutes() < 10\r\n\t\t\t\t\t\t? \"0\" + pollutionUpdateTime.getMinutes()\r\n\t\t\t\t\t\t: pollutionUpdateTime.getMinutes}{\" \"}\r\n\t\t\t\t\t{/* is it in the morning or afternoon */}\r\n\t\t\t\t\t{pollutionUpdateTime.getHours() <= 12 ? \"AM\" : \"PM\"},{\" \"}\r\n\t\t\t\t\t{pollutionUpdateTime.getMonth() + 1}/{weatherUpdateTime.getDate()}/\r\n\t\t\t\t\t{pollutionUpdateTime.getFullYear()})\r\n\t\t\t\t</h3>\r\n\r\n\t\t\t\t<p className=\"desc-p\">\r\n\t\t\t\t\t{airQualityDescriptions[airQuality].description}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"weather-info results-container\">\r\n\t\t\t\t<h2>Weather Information:</h2>\r\n\t\t\t\t<h3 className=\"timestamp-info\">\r\n\t\t\t\t\t(as of{\" \"}\r\n\t\t\t\t\t{/* hours: \r\n                     if greater than 12, subtract 12.\r\n                     if equal to 0, show 12.  */}\r\n\t\t\t\t\t{weatherUpdateTime.getHours() <= 12\r\n\t\t\t\t\t\t? weatherUpdateTime.getHours()\r\n\t\t\t\t\t\t: weatherUpdateTime.getHours() === 0\r\n\t\t\t\t\t\t? \"12\"\r\n\t\t\t\t\t\t: weatherUpdateTime.getHours() - 12}\r\n\t\t\t\t\t{\":\"}\r\n\t\t\t\t\t{/* minutes: if less than 10, add a zero */}\r\n\t\t\t\t\t{weatherUpdateTime.getMinutes() < 10\r\n\t\t\t\t\t\t? \"0\" + weatherUpdateTime.getMinutes()\r\n\t\t\t\t\t\t: weatherUpdateTime.getMinutes}{\" \"}\r\n\t\t\t\t\t{/* is it in the morning or afternoon */}\r\n\t\t\t\t\t{weatherUpdateTime.getHours() <= 12 ? \"AM\" : \"PM\"},{\" \"}\r\n\t\t\t\t\t{weatherUpdateTime.getMonth() + 1}/{weatherUpdateTime.getDate()}/\r\n\t\t\t\t\t{weatherUpdateTime.getFullYear()})\r\n\t\t\t\t</h3>\r\n\t\t\t\t<p className=\"desc-p\">\r\n\t\t\t\t\t{props.results.data.current.weather.tp}&#176;C /{\" \"}\r\n\t\t\t\t\t{(props.results.data.current.weather.tp * 9) / 5 + 32}&#176;F\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\n// function to be used in fetch().then() to make sure errors are caught\r\nconst handleErrors = (response) => {\r\n\tif (!response.ok) {\r\n\t\tthrow Error(response.statusText);\r\n\t}\r\n\treturn response;\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}